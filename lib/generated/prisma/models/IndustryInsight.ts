
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IndustryInsight` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model IndustryInsight
 * 
 */
export type IndustryInsightModel = runtime.Types.Result.DefaultSelection<Prisma.$IndustryInsightPayload>

export type AggregateIndustryInsight = {
  _count: IndustryInsightCountAggregateOutputType | null
  _avg: IndustryInsightAvgAggregateOutputType | null
  _sum: IndustryInsightSumAggregateOutputType | null
  _min: IndustryInsightMinAggregateOutputType | null
  _max: IndustryInsightMaxAggregateOutputType | null
}

export type IndustryInsightAvgAggregateOutputType = {
  growthRate: number | null
}

export type IndustryInsightSumAggregateOutputType = {
  growthRate: number | null
}

export type IndustryInsightMinAggregateOutputType = {
  id: string | null
  industry: string | null
  growthRate: number | null
  demandLevel: $Enums.DemandLevel | null
  marketOutlook: $Enums.MarketOutLook | null
  lastUpdated: Date | null
  nextUpdate: Date | null
}

export type IndustryInsightMaxAggregateOutputType = {
  id: string | null
  industry: string | null
  growthRate: number | null
  demandLevel: $Enums.DemandLevel | null
  marketOutlook: $Enums.MarketOutLook | null
  lastUpdated: Date | null
  nextUpdate: Date | null
}

export type IndustryInsightCountAggregateOutputType = {
  id: number
  industry: number
  salaryRanges: number
  growthRate: number
  demandLevel: number
  topSkills: number
  marketOutlook: number
  keyTrends: number
  recommendedSkills: number
  lastUpdated: number
  nextUpdate: number
  _all: number
}


export type IndustryInsightAvgAggregateInputType = {
  growthRate?: true
}

export type IndustryInsightSumAggregateInputType = {
  growthRate?: true
}

export type IndustryInsightMinAggregateInputType = {
  id?: true
  industry?: true
  growthRate?: true
  demandLevel?: true
  marketOutlook?: true
  lastUpdated?: true
  nextUpdate?: true
}

export type IndustryInsightMaxAggregateInputType = {
  id?: true
  industry?: true
  growthRate?: true
  demandLevel?: true
  marketOutlook?: true
  lastUpdated?: true
  nextUpdate?: true
}

export type IndustryInsightCountAggregateInputType = {
  id?: true
  industry?: true
  salaryRanges?: true
  growthRate?: true
  demandLevel?: true
  topSkills?: true
  marketOutlook?: true
  keyTrends?: true
  recommendedSkills?: true
  lastUpdated?: true
  nextUpdate?: true
  _all?: true
}

export type IndustryInsightAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IndustryInsight to aggregate.
   */
  where?: Prisma.IndustryInsightWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IndustryInsights to fetch.
   */
  orderBy?: Prisma.IndustryInsightOrderByWithRelationInput | Prisma.IndustryInsightOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IndustryInsightWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IndustryInsights from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IndustryInsights.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IndustryInsights
  **/
  _count?: true | IndustryInsightCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IndustryInsightAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IndustryInsightSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IndustryInsightMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IndustryInsightMaxAggregateInputType
}

export type GetIndustryInsightAggregateType<T extends IndustryInsightAggregateArgs> = {
      [P in keyof T & keyof AggregateIndustryInsight]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIndustryInsight[P]>
    : Prisma.GetScalarType<T[P], AggregateIndustryInsight[P]>
}




export type IndustryInsightGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IndustryInsightWhereInput
  orderBy?: Prisma.IndustryInsightOrderByWithAggregationInput | Prisma.IndustryInsightOrderByWithAggregationInput[]
  by: Prisma.IndustryInsightScalarFieldEnum[] | Prisma.IndustryInsightScalarFieldEnum
  having?: Prisma.IndustryInsightScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IndustryInsightCountAggregateInputType | true
  _avg?: IndustryInsightAvgAggregateInputType
  _sum?: IndustryInsightSumAggregateInputType
  _min?: IndustryInsightMinAggregateInputType
  _max?: IndustryInsightMaxAggregateInputType
}

export type IndustryInsightGroupByOutputType = {
  id: string
  industry: string
  salaryRanges: runtime.JsonValue[]
  growthRate: number
  demandLevel: $Enums.DemandLevel
  topSkills: string[]
  marketOutlook: $Enums.MarketOutLook
  keyTrends: string[]
  recommendedSkills: string[]
  lastUpdated: Date
  nextUpdate: Date
  _count: IndustryInsightCountAggregateOutputType | null
  _avg: IndustryInsightAvgAggregateOutputType | null
  _sum: IndustryInsightSumAggregateOutputType | null
  _min: IndustryInsightMinAggregateOutputType | null
  _max: IndustryInsightMaxAggregateOutputType | null
}

type GetIndustryInsightGroupByPayload<T extends IndustryInsightGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IndustryInsightGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IndustryInsightGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IndustryInsightGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IndustryInsightGroupByOutputType[P]>
      }
    >
  > 



export type IndustryInsightWhereInput = {
  AND?: Prisma.IndustryInsightWhereInput | Prisma.IndustryInsightWhereInput[]
  OR?: Prisma.IndustryInsightWhereInput[]
  NOT?: Prisma.IndustryInsightWhereInput | Prisma.IndustryInsightWhereInput[]
  id?: Prisma.StringFilter<"IndustryInsight"> | string
  industry?: Prisma.StringFilter<"IndustryInsight"> | string
  salaryRanges?: Prisma.JsonNullableListFilter<"IndustryInsight">
  growthRate?: Prisma.FloatFilter<"IndustryInsight"> | number
  demandLevel?: Prisma.EnumDemandLevelFilter<"IndustryInsight"> | $Enums.DemandLevel
  topSkills?: Prisma.StringNullableListFilter<"IndustryInsight">
  marketOutlook?: Prisma.EnumMarketOutLookFilter<"IndustryInsight"> | $Enums.MarketOutLook
  keyTrends?: Prisma.StringNullableListFilter<"IndustryInsight">
  recommendedSkills?: Prisma.StringNullableListFilter<"IndustryInsight">
  lastUpdated?: Prisma.DateTimeFilter<"IndustryInsight"> | Date | string
  nextUpdate?: Prisma.DateTimeFilter<"IndustryInsight"> | Date | string
  users?: Prisma.UserListRelationFilter
}

export type IndustryInsightOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  salaryRanges?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  demandLevel?: Prisma.SortOrder
  topSkills?: Prisma.SortOrder
  marketOutlook?: Prisma.SortOrder
  keyTrends?: Prisma.SortOrder
  recommendedSkills?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  nextUpdate?: Prisma.SortOrder
  users?: Prisma.UserOrderByRelationAggregateInput
}

export type IndustryInsightWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  industry?: string
  AND?: Prisma.IndustryInsightWhereInput | Prisma.IndustryInsightWhereInput[]
  OR?: Prisma.IndustryInsightWhereInput[]
  NOT?: Prisma.IndustryInsightWhereInput | Prisma.IndustryInsightWhereInput[]
  salaryRanges?: Prisma.JsonNullableListFilter<"IndustryInsight">
  growthRate?: Prisma.FloatFilter<"IndustryInsight"> | number
  demandLevel?: Prisma.EnumDemandLevelFilter<"IndustryInsight"> | $Enums.DemandLevel
  topSkills?: Prisma.StringNullableListFilter<"IndustryInsight">
  marketOutlook?: Prisma.EnumMarketOutLookFilter<"IndustryInsight"> | $Enums.MarketOutLook
  keyTrends?: Prisma.StringNullableListFilter<"IndustryInsight">
  recommendedSkills?: Prisma.StringNullableListFilter<"IndustryInsight">
  lastUpdated?: Prisma.DateTimeFilter<"IndustryInsight"> | Date | string
  nextUpdate?: Prisma.DateTimeFilter<"IndustryInsight"> | Date | string
  users?: Prisma.UserListRelationFilter
}, "id" | "industry">

export type IndustryInsightOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  salaryRanges?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  demandLevel?: Prisma.SortOrder
  topSkills?: Prisma.SortOrder
  marketOutlook?: Prisma.SortOrder
  keyTrends?: Prisma.SortOrder
  recommendedSkills?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  nextUpdate?: Prisma.SortOrder
  _count?: Prisma.IndustryInsightCountOrderByAggregateInput
  _avg?: Prisma.IndustryInsightAvgOrderByAggregateInput
  _max?: Prisma.IndustryInsightMaxOrderByAggregateInput
  _min?: Prisma.IndustryInsightMinOrderByAggregateInput
  _sum?: Prisma.IndustryInsightSumOrderByAggregateInput
}

export type IndustryInsightScalarWhereWithAggregatesInput = {
  AND?: Prisma.IndustryInsightScalarWhereWithAggregatesInput | Prisma.IndustryInsightScalarWhereWithAggregatesInput[]
  OR?: Prisma.IndustryInsightScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IndustryInsightScalarWhereWithAggregatesInput | Prisma.IndustryInsightScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"IndustryInsight"> | string
  industry?: Prisma.StringWithAggregatesFilter<"IndustryInsight"> | string
  salaryRanges?: Prisma.JsonNullableListFilter<"IndustryInsight">
  growthRate?: Prisma.FloatWithAggregatesFilter<"IndustryInsight"> | number
  demandLevel?: Prisma.EnumDemandLevelWithAggregatesFilter<"IndustryInsight"> | $Enums.DemandLevel
  topSkills?: Prisma.StringNullableListFilter<"IndustryInsight">
  marketOutlook?: Prisma.EnumMarketOutLookWithAggregatesFilter<"IndustryInsight"> | $Enums.MarketOutLook
  keyTrends?: Prisma.StringNullableListFilter<"IndustryInsight">
  recommendedSkills?: Prisma.StringNullableListFilter<"IndustryInsight">
  lastUpdated?: Prisma.DateTimeWithAggregatesFilter<"IndustryInsight"> | Date | string
  nextUpdate?: Prisma.DateTimeWithAggregatesFilter<"IndustryInsight"> | Date | string
}

export type IndustryInsightCreateInput = {
  id?: string
  industry: string
  salaryRanges?: Prisma.IndustryInsightCreatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate: number
  demandLevel: $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightCreatetopSkillsInput | string[]
  marketOutlook: $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightCreatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightCreaterecommendedSkillsInput | string[]
  lastUpdated?: Date | string
  nextUpdate: Date | string
  users?: Prisma.UserCreateNestedManyWithoutIndustryInsightInput
}

export type IndustryInsightUncheckedCreateInput = {
  id?: string
  industry: string
  salaryRanges?: Prisma.IndustryInsightCreatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate: number
  demandLevel: $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightCreatetopSkillsInput | string[]
  marketOutlook: $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightCreatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightCreaterecommendedSkillsInput | string[]
  lastUpdated?: Date | string
  nextUpdate: Date | string
  users?: Prisma.UserUncheckedCreateNestedManyWithoutIndustryInsightInput
}

export type IndustryInsightUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  industry?: Prisma.StringFieldUpdateOperationsInput | string
  salaryRanges?: Prisma.IndustryInsightUpdatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate?: Prisma.FloatFieldUpdateOperationsInput | number
  demandLevel?: Prisma.EnumDemandLevelFieldUpdateOperationsInput | $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightUpdatetopSkillsInput | string[]
  marketOutlook?: Prisma.EnumMarketOutLookFieldUpdateOperationsInput | $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightUpdatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightUpdaterecommendedSkillsInput | string[]
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nextUpdate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  users?: Prisma.UserUpdateManyWithoutIndustryInsightNestedInput
}

export type IndustryInsightUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  industry?: Prisma.StringFieldUpdateOperationsInput | string
  salaryRanges?: Prisma.IndustryInsightUpdatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate?: Prisma.FloatFieldUpdateOperationsInput | number
  demandLevel?: Prisma.EnumDemandLevelFieldUpdateOperationsInput | $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightUpdatetopSkillsInput | string[]
  marketOutlook?: Prisma.EnumMarketOutLookFieldUpdateOperationsInput | $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightUpdatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightUpdaterecommendedSkillsInput | string[]
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nextUpdate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  users?: Prisma.UserUncheckedUpdateManyWithoutIndustryInsightNestedInput
}

export type IndustryInsightCreateManyInput = {
  id?: string
  industry: string
  salaryRanges?: Prisma.IndustryInsightCreatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate: number
  demandLevel: $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightCreatetopSkillsInput | string[]
  marketOutlook: $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightCreatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightCreaterecommendedSkillsInput | string[]
  lastUpdated?: Date | string
  nextUpdate: Date | string
}

export type IndustryInsightUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  industry?: Prisma.StringFieldUpdateOperationsInput | string
  salaryRanges?: Prisma.IndustryInsightUpdatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate?: Prisma.FloatFieldUpdateOperationsInput | number
  demandLevel?: Prisma.EnumDemandLevelFieldUpdateOperationsInput | $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightUpdatetopSkillsInput | string[]
  marketOutlook?: Prisma.EnumMarketOutLookFieldUpdateOperationsInput | $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightUpdatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightUpdaterecommendedSkillsInput | string[]
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nextUpdate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IndustryInsightUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  industry?: Prisma.StringFieldUpdateOperationsInput | string
  salaryRanges?: Prisma.IndustryInsightUpdatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate?: Prisma.FloatFieldUpdateOperationsInput | number
  demandLevel?: Prisma.EnumDemandLevelFieldUpdateOperationsInput | $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightUpdatetopSkillsInput | string[]
  marketOutlook?: Prisma.EnumMarketOutLookFieldUpdateOperationsInput | $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightUpdatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightUpdaterecommendedSkillsInput | string[]
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nextUpdate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IndustryInsightNullableScalarRelationFilter = {
  is?: Prisma.IndustryInsightWhereInput | null
  isNot?: Prisma.IndustryInsightWhereInput | null
}

export type IndustryInsightCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  salaryRanges?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  demandLevel?: Prisma.SortOrder
  topSkills?: Prisma.SortOrder
  marketOutlook?: Prisma.SortOrder
  keyTrends?: Prisma.SortOrder
  recommendedSkills?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  nextUpdate?: Prisma.SortOrder
}

export type IndustryInsightAvgOrderByAggregateInput = {
  growthRate?: Prisma.SortOrder
}

export type IndustryInsightMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  demandLevel?: Prisma.SortOrder
  marketOutlook?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  nextUpdate?: Prisma.SortOrder
}

export type IndustryInsightMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  industry?: Prisma.SortOrder
  growthRate?: Prisma.SortOrder
  demandLevel?: Prisma.SortOrder
  marketOutlook?: Prisma.SortOrder
  lastUpdated?: Prisma.SortOrder
  nextUpdate?: Prisma.SortOrder
}

export type IndustryInsightSumOrderByAggregateInput = {
  growthRate?: Prisma.SortOrder
}

export type IndustryInsightCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.IndustryInsightCreateWithoutUsersInput, Prisma.IndustryInsightUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.IndustryInsightCreateOrConnectWithoutUsersInput
  connect?: Prisma.IndustryInsightWhereUniqueInput
}

export type IndustryInsightUpdateOneWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.IndustryInsightCreateWithoutUsersInput, Prisma.IndustryInsightUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.IndustryInsightCreateOrConnectWithoutUsersInput
  upsert?: Prisma.IndustryInsightUpsertWithoutUsersInput
  disconnect?: Prisma.IndustryInsightWhereInput | boolean
  delete?: Prisma.IndustryInsightWhereInput | boolean
  connect?: Prisma.IndustryInsightWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IndustryInsightUpdateToOneWithWhereWithoutUsersInput, Prisma.IndustryInsightUpdateWithoutUsersInput>, Prisma.IndustryInsightUncheckedUpdateWithoutUsersInput>
}

export type IndustryInsightCreatesalaryRangesInput = {
  set: runtime.InputJsonValue[]
}

export type IndustryInsightCreatetopSkillsInput = {
  set: string[]
}

export type IndustryInsightCreatekeyTrendsInput = {
  set: string[]
}

export type IndustryInsightCreaterecommendedSkillsInput = {
  set: string[]
}

export type IndustryInsightUpdatesalaryRangesInput = {
  set?: runtime.InputJsonValue[]
  push?: runtime.InputJsonValue | runtime.InputJsonValue[]
}

export type EnumDemandLevelFieldUpdateOperationsInput = {
  set?: $Enums.DemandLevel
}

export type IndustryInsightUpdatetopSkillsInput = {
  set?: string[]
  push?: string | string[]
}

export type EnumMarketOutLookFieldUpdateOperationsInput = {
  set?: $Enums.MarketOutLook
}

export type IndustryInsightUpdatekeyTrendsInput = {
  set?: string[]
  push?: string | string[]
}

export type IndustryInsightUpdaterecommendedSkillsInput = {
  set?: string[]
  push?: string | string[]
}

export type IndustryInsightCreateWithoutUsersInput = {
  id?: string
  industry: string
  salaryRanges?: Prisma.IndustryInsightCreatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate: number
  demandLevel: $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightCreatetopSkillsInput | string[]
  marketOutlook: $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightCreatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightCreaterecommendedSkillsInput | string[]
  lastUpdated?: Date | string
  nextUpdate: Date | string
}

export type IndustryInsightUncheckedCreateWithoutUsersInput = {
  id?: string
  industry: string
  salaryRanges?: Prisma.IndustryInsightCreatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate: number
  demandLevel: $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightCreatetopSkillsInput | string[]
  marketOutlook: $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightCreatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightCreaterecommendedSkillsInput | string[]
  lastUpdated?: Date | string
  nextUpdate: Date | string
}

export type IndustryInsightCreateOrConnectWithoutUsersInput = {
  where: Prisma.IndustryInsightWhereUniqueInput
  create: Prisma.XOR<Prisma.IndustryInsightCreateWithoutUsersInput, Prisma.IndustryInsightUncheckedCreateWithoutUsersInput>
}

export type IndustryInsightUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.IndustryInsightUpdateWithoutUsersInput, Prisma.IndustryInsightUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.IndustryInsightCreateWithoutUsersInput, Prisma.IndustryInsightUncheckedCreateWithoutUsersInput>
  where?: Prisma.IndustryInsightWhereInput
}

export type IndustryInsightUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.IndustryInsightWhereInput
  data: Prisma.XOR<Prisma.IndustryInsightUpdateWithoutUsersInput, Prisma.IndustryInsightUncheckedUpdateWithoutUsersInput>
}

export type IndustryInsightUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  industry?: Prisma.StringFieldUpdateOperationsInput | string
  salaryRanges?: Prisma.IndustryInsightUpdatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate?: Prisma.FloatFieldUpdateOperationsInput | number
  demandLevel?: Prisma.EnumDemandLevelFieldUpdateOperationsInput | $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightUpdatetopSkillsInput | string[]
  marketOutlook?: Prisma.EnumMarketOutLookFieldUpdateOperationsInput | $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightUpdatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightUpdaterecommendedSkillsInput | string[]
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nextUpdate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IndustryInsightUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  industry?: Prisma.StringFieldUpdateOperationsInput | string
  salaryRanges?: Prisma.IndustryInsightUpdatesalaryRangesInput | runtime.InputJsonValue[]
  growthRate?: Prisma.FloatFieldUpdateOperationsInput | number
  demandLevel?: Prisma.EnumDemandLevelFieldUpdateOperationsInput | $Enums.DemandLevel
  topSkills?: Prisma.IndustryInsightUpdatetopSkillsInput | string[]
  marketOutlook?: Prisma.EnumMarketOutLookFieldUpdateOperationsInput | $Enums.MarketOutLook
  keyTrends?: Prisma.IndustryInsightUpdatekeyTrendsInput | string[]
  recommendedSkills?: Prisma.IndustryInsightUpdaterecommendedSkillsInput | string[]
  lastUpdated?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  nextUpdate?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type IndustryInsightCountOutputType
 */

export type IndustryInsightCountOutputType = {
  users: number
}

export type IndustryInsightCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | IndustryInsightCountOutputTypeCountUsersArgs
}

/**
 * IndustryInsightCountOutputType without action
 */
export type IndustryInsightCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsightCountOutputType
   */
  select?: Prisma.IndustryInsightCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IndustryInsightCountOutputType without action
 */
export type IndustryInsightCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type IndustryInsightSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  industry?: boolean
  salaryRanges?: boolean
  growthRate?: boolean
  demandLevel?: boolean
  topSkills?: boolean
  marketOutlook?: boolean
  keyTrends?: boolean
  recommendedSkills?: boolean
  lastUpdated?: boolean
  nextUpdate?: boolean
  users?: boolean | Prisma.IndustryInsight$usersArgs<ExtArgs>
  _count?: boolean | Prisma.IndustryInsightCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["industryInsight"]>

export type IndustryInsightSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  industry?: boolean
  salaryRanges?: boolean
  growthRate?: boolean
  demandLevel?: boolean
  topSkills?: boolean
  marketOutlook?: boolean
  keyTrends?: boolean
  recommendedSkills?: boolean
  lastUpdated?: boolean
  nextUpdate?: boolean
}, ExtArgs["result"]["industryInsight"]>

export type IndustryInsightSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  industry?: boolean
  salaryRanges?: boolean
  growthRate?: boolean
  demandLevel?: boolean
  topSkills?: boolean
  marketOutlook?: boolean
  keyTrends?: boolean
  recommendedSkills?: boolean
  lastUpdated?: boolean
  nextUpdate?: boolean
}, ExtArgs["result"]["industryInsight"]>

export type IndustryInsightSelectScalar = {
  id?: boolean
  industry?: boolean
  salaryRanges?: boolean
  growthRate?: boolean
  demandLevel?: boolean
  topSkills?: boolean
  marketOutlook?: boolean
  keyTrends?: boolean
  recommendedSkills?: boolean
  lastUpdated?: boolean
  nextUpdate?: boolean
}

export type IndustryInsightOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "industry" | "salaryRanges" | "growthRate" | "demandLevel" | "topSkills" | "marketOutlook" | "keyTrends" | "recommendedSkills" | "lastUpdated" | "nextUpdate", ExtArgs["result"]["industryInsight"]>
export type IndustryInsightInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | Prisma.IndustryInsight$usersArgs<ExtArgs>
  _count?: boolean | Prisma.IndustryInsightCountOutputTypeDefaultArgs<ExtArgs>
}
export type IndustryInsightIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type IndustryInsightIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $IndustryInsightPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IndustryInsight"
  objects: {
    users: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    industry: string
    salaryRanges: runtime.JsonValue[]
    growthRate: number
    demandLevel: $Enums.DemandLevel
    topSkills: string[]
    marketOutlook: $Enums.MarketOutLook
    keyTrends: string[]
    recommendedSkills: string[]
    lastUpdated: Date
    nextUpdate: Date
  }, ExtArgs["result"]["industryInsight"]>
  composites: {}
}

export type IndustryInsightGetPayload<S extends boolean | null | undefined | IndustryInsightDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload, S>

export type IndustryInsightCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IndustryInsightFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IndustryInsightCountAggregateInputType | true
  }

export interface IndustryInsightDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IndustryInsight'], meta: { name: 'IndustryInsight' } }
  /**
   * Find zero or one IndustryInsight that matches the filter.
   * @param {IndustryInsightFindUniqueArgs} args - Arguments to find a IndustryInsight
   * @example
   * // Get one IndustryInsight
   * const industryInsight = await prisma.industryInsight.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IndustryInsightFindUniqueArgs>(args: Prisma.SelectSubset<T, IndustryInsightFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IndustryInsight that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IndustryInsightFindUniqueOrThrowArgs} args - Arguments to find a IndustryInsight
   * @example
   * // Get one IndustryInsight
   * const industryInsight = await prisma.industryInsight.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IndustryInsightFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IndustryInsightFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IndustryInsight that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IndustryInsightFindFirstArgs} args - Arguments to find a IndustryInsight
   * @example
   * // Get one IndustryInsight
   * const industryInsight = await prisma.industryInsight.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IndustryInsightFindFirstArgs>(args?: Prisma.SelectSubset<T, IndustryInsightFindFirstArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IndustryInsight that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IndustryInsightFindFirstOrThrowArgs} args - Arguments to find a IndustryInsight
   * @example
   * // Get one IndustryInsight
   * const industryInsight = await prisma.industryInsight.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IndustryInsightFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IndustryInsightFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IndustryInsights that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IndustryInsightFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IndustryInsights
   * const industryInsights = await prisma.industryInsight.findMany()
   * 
   * // Get first 10 IndustryInsights
   * const industryInsights = await prisma.industryInsight.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const industryInsightWithIdOnly = await prisma.industryInsight.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IndustryInsightFindManyArgs>(args?: Prisma.SelectSubset<T, IndustryInsightFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IndustryInsight.
   * @param {IndustryInsightCreateArgs} args - Arguments to create a IndustryInsight.
   * @example
   * // Create one IndustryInsight
   * const IndustryInsight = await prisma.industryInsight.create({
   *   data: {
   *     // ... data to create a IndustryInsight
   *   }
   * })
   * 
   */
  create<T extends IndustryInsightCreateArgs>(args: Prisma.SelectSubset<T, IndustryInsightCreateArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IndustryInsights.
   * @param {IndustryInsightCreateManyArgs} args - Arguments to create many IndustryInsights.
   * @example
   * // Create many IndustryInsights
   * const industryInsight = await prisma.industryInsight.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IndustryInsightCreateManyArgs>(args?: Prisma.SelectSubset<T, IndustryInsightCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many IndustryInsights and returns the data saved in the database.
   * @param {IndustryInsightCreateManyAndReturnArgs} args - Arguments to create many IndustryInsights.
   * @example
   * // Create many IndustryInsights
   * const industryInsight = await prisma.industryInsight.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many IndustryInsights and only return the `id`
   * const industryInsightWithIdOnly = await prisma.industryInsight.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends IndustryInsightCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, IndustryInsightCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a IndustryInsight.
   * @param {IndustryInsightDeleteArgs} args - Arguments to delete one IndustryInsight.
   * @example
   * // Delete one IndustryInsight
   * const IndustryInsight = await prisma.industryInsight.delete({
   *   where: {
   *     // ... filter to delete one IndustryInsight
   *   }
   * })
   * 
   */
  delete<T extends IndustryInsightDeleteArgs>(args: Prisma.SelectSubset<T, IndustryInsightDeleteArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IndustryInsight.
   * @param {IndustryInsightUpdateArgs} args - Arguments to update one IndustryInsight.
   * @example
   * // Update one IndustryInsight
   * const industryInsight = await prisma.industryInsight.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IndustryInsightUpdateArgs>(args: Prisma.SelectSubset<T, IndustryInsightUpdateArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IndustryInsights.
   * @param {IndustryInsightDeleteManyArgs} args - Arguments to filter IndustryInsights to delete.
   * @example
   * // Delete a few IndustryInsights
   * const { count } = await prisma.industryInsight.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IndustryInsightDeleteManyArgs>(args?: Prisma.SelectSubset<T, IndustryInsightDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IndustryInsights.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IndustryInsightUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IndustryInsights
   * const industryInsight = await prisma.industryInsight.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IndustryInsightUpdateManyArgs>(args: Prisma.SelectSubset<T, IndustryInsightUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IndustryInsights and returns the data updated in the database.
   * @param {IndustryInsightUpdateManyAndReturnArgs} args - Arguments to update many IndustryInsights.
   * @example
   * // Update many IndustryInsights
   * const industryInsight = await prisma.industryInsight.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more IndustryInsights and only return the `id`
   * const industryInsightWithIdOnly = await prisma.industryInsight.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends IndustryInsightUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, IndustryInsightUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one IndustryInsight.
   * @param {IndustryInsightUpsertArgs} args - Arguments to update or create a IndustryInsight.
   * @example
   * // Update or create a IndustryInsight
   * const industryInsight = await prisma.industryInsight.upsert({
   *   create: {
   *     // ... data to create a IndustryInsight
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IndustryInsight we want to update
   *   }
   * })
   */
  upsert<T extends IndustryInsightUpsertArgs>(args: Prisma.SelectSubset<T, IndustryInsightUpsertArgs<ExtArgs>>): Prisma.Prisma__IndustryInsightClient<runtime.Types.Result.GetResult<Prisma.$IndustryInsightPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IndustryInsights.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IndustryInsightCountArgs} args - Arguments to filter IndustryInsights to count.
   * @example
   * // Count the number of IndustryInsights
   * const count = await prisma.industryInsight.count({
   *   where: {
   *     // ... the filter for the IndustryInsights we want to count
   *   }
   * })
  **/
  count<T extends IndustryInsightCountArgs>(
    args?: Prisma.Subset<T, IndustryInsightCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IndustryInsightCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IndustryInsight.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IndustryInsightAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IndustryInsightAggregateArgs>(args: Prisma.Subset<T, IndustryInsightAggregateArgs>): Prisma.PrismaPromise<GetIndustryInsightAggregateType<T>>

  /**
   * Group by IndustryInsight.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IndustryInsightGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IndustryInsightGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IndustryInsightGroupByArgs['orderBy'] }
      : { orderBy?: IndustryInsightGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IndustryInsightGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIndustryInsightGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IndustryInsight model
 */
readonly fields: IndustryInsightFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IndustryInsight.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IndustryInsightClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  users<T extends Prisma.IndustryInsight$usersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IndustryInsight$usersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IndustryInsight model
 */
export interface IndustryInsightFieldRefs {
  readonly id: Prisma.FieldRef<"IndustryInsight", 'String'>
  readonly industry: Prisma.FieldRef<"IndustryInsight", 'String'>
  readonly salaryRanges: Prisma.FieldRef<"IndustryInsight", 'Json[]'>
  readonly growthRate: Prisma.FieldRef<"IndustryInsight", 'Float'>
  readonly demandLevel: Prisma.FieldRef<"IndustryInsight", 'DemandLevel'>
  readonly topSkills: Prisma.FieldRef<"IndustryInsight", 'String[]'>
  readonly marketOutlook: Prisma.FieldRef<"IndustryInsight", 'MarketOutLook'>
  readonly keyTrends: Prisma.FieldRef<"IndustryInsight", 'String[]'>
  readonly recommendedSkills: Prisma.FieldRef<"IndustryInsight", 'String[]'>
  readonly lastUpdated: Prisma.FieldRef<"IndustryInsight", 'DateTime'>
  readonly nextUpdate: Prisma.FieldRef<"IndustryInsight", 'DateTime'>
}
    

// Custom InputTypes
/**
 * IndustryInsight findUnique
 */
export type IndustryInsightFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * Filter, which IndustryInsight to fetch.
   */
  where: Prisma.IndustryInsightWhereUniqueInput
}

/**
 * IndustryInsight findUniqueOrThrow
 */
export type IndustryInsightFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * Filter, which IndustryInsight to fetch.
   */
  where: Prisma.IndustryInsightWhereUniqueInput
}

/**
 * IndustryInsight findFirst
 */
export type IndustryInsightFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * Filter, which IndustryInsight to fetch.
   */
  where?: Prisma.IndustryInsightWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IndustryInsights to fetch.
   */
  orderBy?: Prisma.IndustryInsightOrderByWithRelationInput | Prisma.IndustryInsightOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IndustryInsights.
   */
  cursor?: Prisma.IndustryInsightWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IndustryInsights from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IndustryInsights.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IndustryInsights.
   */
  distinct?: Prisma.IndustryInsightScalarFieldEnum | Prisma.IndustryInsightScalarFieldEnum[]
}

/**
 * IndustryInsight findFirstOrThrow
 */
export type IndustryInsightFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * Filter, which IndustryInsight to fetch.
   */
  where?: Prisma.IndustryInsightWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IndustryInsights to fetch.
   */
  orderBy?: Prisma.IndustryInsightOrderByWithRelationInput | Prisma.IndustryInsightOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IndustryInsights.
   */
  cursor?: Prisma.IndustryInsightWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IndustryInsights from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IndustryInsights.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IndustryInsights.
   */
  distinct?: Prisma.IndustryInsightScalarFieldEnum | Prisma.IndustryInsightScalarFieldEnum[]
}

/**
 * IndustryInsight findMany
 */
export type IndustryInsightFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * Filter, which IndustryInsights to fetch.
   */
  where?: Prisma.IndustryInsightWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IndustryInsights to fetch.
   */
  orderBy?: Prisma.IndustryInsightOrderByWithRelationInput | Prisma.IndustryInsightOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IndustryInsights.
   */
  cursor?: Prisma.IndustryInsightWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IndustryInsights from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IndustryInsights.
   */
  skip?: number
  distinct?: Prisma.IndustryInsightScalarFieldEnum | Prisma.IndustryInsightScalarFieldEnum[]
}

/**
 * IndustryInsight create
 */
export type IndustryInsightCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * The data needed to create a IndustryInsight.
   */
  data: Prisma.XOR<Prisma.IndustryInsightCreateInput, Prisma.IndustryInsightUncheckedCreateInput>
}

/**
 * IndustryInsight createMany
 */
export type IndustryInsightCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IndustryInsights.
   */
  data: Prisma.IndustryInsightCreateManyInput | Prisma.IndustryInsightCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IndustryInsight createManyAndReturn
 */
export type IndustryInsightCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * The data used to create many IndustryInsights.
   */
  data: Prisma.IndustryInsightCreateManyInput | Prisma.IndustryInsightCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IndustryInsight update
 */
export type IndustryInsightUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * The data needed to update a IndustryInsight.
   */
  data: Prisma.XOR<Prisma.IndustryInsightUpdateInput, Prisma.IndustryInsightUncheckedUpdateInput>
  /**
   * Choose, which IndustryInsight to update.
   */
  where: Prisma.IndustryInsightWhereUniqueInput
}

/**
 * IndustryInsight updateMany
 */
export type IndustryInsightUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IndustryInsights.
   */
  data: Prisma.XOR<Prisma.IndustryInsightUpdateManyMutationInput, Prisma.IndustryInsightUncheckedUpdateManyInput>
  /**
   * Filter which IndustryInsights to update
   */
  where?: Prisma.IndustryInsightWhereInput
  /**
   * Limit how many IndustryInsights to update.
   */
  limit?: number
}

/**
 * IndustryInsight updateManyAndReturn
 */
export type IndustryInsightUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * The data used to update IndustryInsights.
   */
  data: Prisma.XOR<Prisma.IndustryInsightUpdateManyMutationInput, Prisma.IndustryInsightUncheckedUpdateManyInput>
  /**
   * Filter which IndustryInsights to update
   */
  where?: Prisma.IndustryInsightWhereInput
  /**
   * Limit how many IndustryInsights to update.
   */
  limit?: number
}

/**
 * IndustryInsight upsert
 */
export type IndustryInsightUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * The filter to search for the IndustryInsight to update in case it exists.
   */
  where: Prisma.IndustryInsightWhereUniqueInput
  /**
   * In case the IndustryInsight found by the `where` argument doesn't exist, create a new IndustryInsight with this data.
   */
  create: Prisma.XOR<Prisma.IndustryInsightCreateInput, Prisma.IndustryInsightUncheckedCreateInput>
  /**
   * In case the IndustryInsight was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IndustryInsightUpdateInput, Prisma.IndustryInsightUncheckedUpdateInput>
}

/**
 * IndustryInsight delete
 */
export type IndustryInsightDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
  /**
   * Filter which IndustryInsight to delete.
   */
  where: Prisma.IndustryInsightWhereUniqueInput
}

/**
 * IndustryInsight deleteMany
 */
export type IndustryInsightDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IndustryInsights to delete
   */
  where?: Prisma.IndustryInsightWhereInput
  /**
   * Limit how many IndustryInsights to delete.
   */
  limit?: number
}

/**
 * IndustryInsight.users
 */
export type IndustryInsight$usersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * IndustryInsight without action
 */
export type IndustryInsightDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IndustryInsight
   */
  select?: Prisma.IndustryInsightSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IndustryInsight
   */
  omit?: Prisma.IndustryInsightOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IndustryInsightInclude<ExtArgs> | null
}
