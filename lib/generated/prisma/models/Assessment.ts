
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Assessment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Assessment
 * 
 */
export type AssessmentModel = runtime.Types.Result.DefaultSelection<Prisma.$AssessmentPayload>

export type AggregateAssessment = {
  _count: AssessmentCountAggregateOutputType | null
  _avg: AssessmentAvgAggregateOutputType | null
  _sum: AssessmentSumAggregateOutputType | null
  _min: AssessmentMinAggregateOutputType | null
  _max: AssessmentMaxAggregateOutputType | null
}

export type AssessmentAvgAggregateOutputType = {
  quizScore: number | null
}

export type AssessmentSumAggregateOutputType = {
  quizScore: number | null
}

export type AssessmentMinAggregateOutputType = {
  id: string | null
  userId: string | null
  quizScore: number | null
  category: string | null
  improvementTip: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AssessmentMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  quizScore: number | null
  category: string | null
  improvementTip: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type AssessmentCountAggregateOutputType = {
  id: number
  userId: number
  quizScore: number
  questions: number
  category: number
  improvementTip: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type AssessmentAvgAggregateInputType = {
  quizScore?: true
}

export type AssessmentSumAggregateInputType = {
  quizScore?: true
}

export type AssessmentMinAggregateInputType = {
  id?: true
  userId?: true
  quizScore?: true
  category?: true
  improvementTip?: true
  createdAt?: true
  updatedAt?: true
}

export type AssessmentMaxAggregateInputType = {
  id?: true
  userId?: true
  quizScore?: true
  category?: true
  improvementTip?: true
  createdAt?: true
  updatedAt?: true
}

export type AssessmentCountAggregateInputType = {
  id?: true
  userId?: true
  quizScore?: true
  questions?: true
  category?: true
  improvementTip?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type AssessmentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Assessment to aggregate.
   */
  where?: Prisma.AssessmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assessments to fetch.
   */
  orderBy?: Prisma.AssessmentOrderByWithRelationInput | Prisma.AssessmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AssessmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assessments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assessments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Assessments
  **/
  _count?: true | AssessmentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AssessmentAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AssessmentSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AssessmentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AssessmentMaxAggregateInputType
}

export type GetAssessmentAggregateType<T extends AssessmentAggregateArgs> = {
      [P in keyof T & keyof AggregateAssessment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAssessment[P]>
    : Prisma.GetScalarType<T[P], AggregateAssessment[P]>
}




export type AssessmentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AssessmentWhereInput
  orderBy?: Prisma.AssessmentOrderByWithAggregationInput | Prisma.AssessmentOrderByWithAggregationInput[]
  by: Prisma.AssessmentScalarFieldEnum[] | Prisma.AssessmentScalarFieldEnum
  having?: Prisma.AssessmentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AssessmentCountAggregateInputType | true
  _avg?: AssessmentAvgAggregateInputType
  _sum?: AssessmentSumAggregateInputType
  _min?: AssessmentMinAggregateInputType
  _max?: AssessmentMaxAggregateInputType
}

export type AssessmentGroupByOutputType = {
  id: string
  userId: string
  quizScore: number
  questions: runtime.JsonValue[]
  category: string
  improvementTip: string | null
  createdAt: Date
  updatedAt: Date
  _count: AssessmentCountAggregateOutputType | null
  _avg: AssessmentAvgAggregateOutputType | null
  _sum: AssessmentSumAggregateOutputType | null
  _min: AssessmentMinAggregateOutputType | null
  _max: AssessmentMaxAggregateOutputType | null
}

type GetAssessmentGroupByPayload<T extends AssessmentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AssessmentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AssessmentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AssessmentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AssessmentGroupByOutputType[P]>
      }
    >
  > 



export type AssessmentWhereInput = {
  AND?: Prisma.AssessmentWhereInput | Prisma.AssessmentWhereInput[]
  OR?: Prisma.AssessmentWhereInput[]
  NOT?: Prisma.AssessmentWhereInput | Prisma.AssessmentWhereInput[]
  id?: Prisma.StringFilter<"Assessment"> | string
  userId?: Prisma.StringFilter<"Assessment"> | string
  quizScore?: Prisma.FloatFilter<"Assessment"> | number
  questions?: Prisma.JsonNullableListFilter<"Assessment">
  category?: Prisma.StringFilter<"Assessment"> | string
  improvementTip?: Prisma.StringNullableFilter<"Assessment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Assessment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Assessment"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type AssessmentOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizScore?: Prisma.SortOrder
  questions?: Prisma.SortOrder
  category?: Prisma.SortOrder
  improvementTip?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type AssessmentWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AssessmentWhereInput | Prisma.AssessmentWhereInput[]
  OR?: Prisma.AssessmentWhereInput[]
  NOT?: Prisma.AssessmentWhereInput | Prisma.AssessmentWhereInput[]
  userId?: Prisma.StringFilter<"Assessment"> | string
  quizScore?: Prisma.FloatFilter<"Assessment"> | number
  questions?: Prisma.JsonNullableListFilter<"Assessment">
  category?: Prisma.StringFilter<"Assessment"> | string
  improvementTip?: Prisma.StringNullableFilter<"Assessment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Assessment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Assessment"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type AssessmentOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizScore?: Prisma.SortOrder
  questions?: Prisma.SortOrder
  category?: Prisma.SortOrder
  improvementTip?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.AssessmentCountOrderByAggregateInput
  _avg?: Prisma.AssessmentAvgOrderByAggregateInput
  _max?: Prisma.AssessmentMaxOrderByAggregateInput
  _min?: Prisma.AssessmentMinOrderByAggregateInput
  _sum?: Prisma.AssessmentSumOrderByAggregateInput
}

export type AssessmentScalarWhereWithAggregatesInput = {
  AND?: Prisma.AssessmentScalarWhereWithAggregatesInput | Prisma.AssessmentScalarWhereWithAggregatesInput[]
  OR?: Prisma.AssessmentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AssessmentScalarWhereWithAggregatesInput | Prisma.AssessmentScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Assessment"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Assessment"> | string
  quizScore?: Prisma.FloatWithAggregatesFilter<"Assessment"> | number
  questions?: Prisma.JsonNullableListFilter<"Assessment">
  category?: Prisma.StringWithAggregatesFilter<"Assessment"> | string
  improvementTip?: Prisma.StringNullableWithAggregatesFilter<"Assessment"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Assessment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Assessment"> | Date | string
}

export type AssessmentCreateInput = {
  id?: string
  quizScore: number
  questions?: Prisma.AssessmentCreatequestionsInput | runtime.InputJsonValue[]
  category: string
  improvementTip?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAssessmentsInput
}

export type AssessmentUncheckedCreateInput = {
  id?: string
  userId: string
  quizScore: number
  questions?: Prisma.AssessmentCreatequestionsInput | runtime.InputJsonValue[]
  category: string
  improvementTip?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssessmentUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizScore?: Prisma.FloatFieldUpdateOperationsInput | number
  questions?: Prisma.AssessmentUpdatequestionsInput | runtime.InputJsonValue[]
  category?: Prisma.StringFieldUpdateOperationsInput | string
  improvementTip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAssessmentsNestedInput
}

export type AssessmentUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quizScore?: Prisma.FloatFieldUpdateOperationsInput | number
  questions?: Prisma.AssessmentUpdatequestionsInput | runtime.InputJsonValue[]
  category?: Prisma.StringFieldUpdateOperationsInput | string
  improvementTip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssessmentCreateManyInput = {
  id?: string
  userId: string
  quizScore: number
  questions?: Prisma.AssessmentCreatequestionsInput | runtime.InputJsonValue[]
  category: string
  improvementTip?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssessmentUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizScore?: Prisma.FloatFieldUpdateOperationsInput | number
  questions?: Prisma.AssessmentUpdatequestionsInput | runtime.InputJsonValue[]
  category?: Prisma.StringFieldUpdateOperationsInput | string
  improvementTip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssessmentUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  quizScore?: Prisma.FloatFieldUpdateOperationsInput | number
  questions?: Prisma.AssessmentUpdatequestionsInput | runtime.InputJsonValue[]
  category?: Prisma.StringFieldUpdateOperationsInput | string
  improvementTip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssessmentListRelationFilter = {
  every?: Prisma.AssessmentWhereInput
  some?: Prisma.AssessmentWhereInput
  none?: Prisma.AssessmentWhereInput
}

export type AssessmentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type JsonNullableListFilter<$PrismaModel = never> =
| Prisma.PatchUndefined<
    Prisma.Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
    Required<JsonNullableListFilterBase<$PrismaModel>>
  >
| Prisma.OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

export type JsonNullableListFilterBase<$PrismaModel = never> = {
  equals?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel> | null
  has?: runtime.InputJsonValue | Prisma.JsonFieldRefInput<$PrismaModel> | null
  hasEvery?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  hasSome?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type AssessmentCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizScore?: Prisma.SortOrder
  questions?: Prisma.SortOrder
  category?: Prisma.SortOrder
  improvementTip?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AssessmentAvgOrderByAggregateInput = {
  quizScore?: Prisma.SortOrder
}

export type AssessmentMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizScore?: Prisma.SortOrder
  category?: Prisma.SortOrder
  improvementTip?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AssessmentMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  quizScore?: Prisma.SortOrder
  category?: Prisma.SortOrder
  improvementTip?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type AssessmentSumOrderByAggregateInput = {
  quizScore?: Prisma.SortOrder
}

export type AssessmentCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AssessmentCreateWithoutUserInput, Prisma.AssessmentUncheckedCreateWithoutUserInput> | Prisma.AssessmentCreateWithoutUserInput[] | Prisma.AssessmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssessmentCreateOrConnectWithoutUserInput | Prisma.AssessmentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AssessmentCreateManyUserInputEnvelope
  connect?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
}

export type AssessmentUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.AssessmentCreateWithoutUserInput, Prisma.AssessmentUncheckedCreateWithoutUserInput> | Prisma.AssessmentCreateWithoutUserInput[] | Prisma.AssessmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssessmentCreateOrConnectWithoutUserInput | Prisma.AssessmentCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.AssessmentCreateManyUserInputEnvelope
  connect?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
}

export type AssessmentUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AssessmentCreateWithoutUserInput, Prisma.AssessmentUncheckedCreateWithoutUserInput> | Prisma.AssessmentCreateWithoutUserInput[] | Prisma.AssessmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssessmentCreateOrConnectWithoutUserInput | Prisma.AssessmentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AssessmentUpsertWithWhereUniqueWithoutUserInput | Prisma.AssessmentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AssessmentCreateManyUserInputEnvelope
  set?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  disconnect?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  delete?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  connect?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  update?: Prisma.AssessmentUpdateWithWhereUniqueWithoutUserInput | Prisma.AssessmentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AssessmentUpdateManyWithWhereWithoutUserInput | Prisma.AssessmentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AssessmentScalarWhereInput | Prisma.AssessmentScalarWhereInput[]
}

export type AssessmentUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.AssessmentCreateWithoutUserInput, Prisma.AssessmentUncheckedCreateWithoutUserInput> | Prisma.AssessmentCreateWithoutUserInput[] | Prisma.AssessmentUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.AssessmentCreateOrConnectWithoutUserInput | Prisma.AssessmentCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.AssessmentUpsertWithWhereUniqueWithoutUserInput | Prisma.AssessmentUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.AssessmentCreateManyUserInputEnvelope
  set?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  disconnect?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  delete?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  connect?: Prisma.AssessmentWhereUniqueInput | Prisma.AssessmentWhereUniqueInput[]
  update?: Prisma.AssessmentUpdateWithWhereUniqueWithoutUserInput | Prisma.AssessmentUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.AssessmentUpdateManyWithWhereWithoutUserInput | Prisma.AssessmentUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.AssessmentScalarWhereInput | Prisma.AssessmentScalarWhereInput[]
}

export type AssessmentCreatequestionsInput = {
  set: runtime.InputJsonValue[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type AssessmentUpdatequestionsInput = {
  set?: runtime.InputJsonValue[]
  push?: runtime.InputJsonValue | runtime.InputJsonValue[]
}

export type AssessmentCreateWithoutUserInput = {
  id?: string
  quizScore: number
  questions?: Prisma.AssessmentCreatequestionsInput | runtime.InputJsonValue[]
  category: string
  improvementTip?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssessmentUncheckedCreateWithoutUserInput = {
  id?: string
  quizScore: number
  questions?: Prisma.AssessmentCreatequestionsInput | runtime.InputJsonValue[]
  category: string
  improvementTip?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssessmentCreateOrConnectWithoutUserInput = {
  where: Prisma.AssessmentWhereUniqueInput
  create: Prisma.XOR<Prisma.AssessmentCreateWithoutUserInput, Prisma.AssessmentUncheckedCreateWithoutUserInput>
}

export type AssessmentCreateManyUserInputEnvelope = {
  data: Prisma.AssessmentCreateManyUserInput | Prisma.AssessmentCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type AssessmentUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.AssessmentWhereUniqueInput
  update: Prisma.XOR<Prisma.AssessmentUpdateWithoutUserInput, Prisma.AssessmentUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.AssessmentCreateWithoutUserInput, Prisma.AssessmentUncheckedCreateWithoutUserInput>
}

export type AssessmentUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.AssessmentWhereUniqueInput
  data: Prisma.XOR<Prisma.AssessmentUpdateWithoutUserInput, Prisma.AssessmentUncheckedUpdateWithoutUserInput>
}

export type AssessmentUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.AssessmentScalarWhereInput
  data: Prisma.XOR<Prisma.AssessmentUpdateManyMutationInput, Prisma.AssessmentUncheckedUpdateManyWithoutUserInput>
}

export type AssessmentScalarWhereInput = {
  AND?: Prisma.AssessmentScalarWhereInput | Prisma.AssessmentScalarWhereInput[]
  OR?: Prisma.AssessmentScalarWhereInput[]
  NOT?: Prisma.AssessmentScalarWhereInput | Prisma.AssessmentScalarWhereInput[]
  id?: Prisma.StringFilter<"Assessment"> | string
  userId?: Prisma.StringFilter<"Assessment"> | string
  quizScore?: Prisma.FloatFilter<"Assessment"> | number
  questions?: Prisma.JsonNullableListFilter<"Assessment">
  category?: Prisma.StringFilter<"Assessment"> | string
  improvementTip?: Prisma.StringNullableFilter<"Assessment"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Assessment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Assessment"> | Date | string
}

export type AssessmentCreateManyUserInput = {
  id?: string
  quizScore: number
  questions?: Prisma.AssessmentCreatequestionsInput | runtime.InputJsonValue[]
  category: string
  improvementTip?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type AssessmentUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizScore?: Prisma.FloatFieldUpdateOperationsInput | number
  questions?: Prisma.AssessmentUpdatequestionsInput | runtime.InputJsonValue[]
  category?: Prisma.StringFieldUpdateOperationsInput | string
  improvementTip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssessmentUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizScore?: Prisma.FloatFieldUpdateOperationsInput | number
  questions?: Prisma.AssessmentUpdatequestionsInput | runtime.InputJsonValue[]
  category?: Prisma.StringFieldUpdateOperationsInput | string
  improvementTip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AssessmentUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quizScore?: Prisma.FloatFieldUpdateOperationsInput | number
  questions?: Prisma.AssessmentUpdatequestionsInput | runtime.InputJsonValue[]
  category?: Prisma.StringFieldUpdateOperationsInput | string
  improvementTip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AssessmentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  quizScore?: boolean
  questions?: boolean
  category?: boolean
  improvementTip?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assessment"]>

export type AssessmentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  quizScore?: boolean
  questions?: boolean
  category?: boolean
  improvementTip?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assessment"]>

export type AssessmentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  quizScore?: boolean
  questions?: boolean
  category?: boolean
  improvementTip?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["assessment"]>

export type AssessmentSelectScalar = {
  id?: boolean
  userId?: boolean
  quizScore?: boolean
  questions?: boolean
  category?: boolean
  improvementTip?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type AssessmentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "quizScore" | "questions" | "category" | "improvementTip" | "createdAt" | "updatedAt", ExtArgs["result"]["assessment"]>
export type AssessmentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AssessmentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type AssessmentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $AssessmentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Assessment"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    quizScore: number
    questions: runtime.JsonValue[]
    category: string
    improvementTip: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["assessment"]>
  composites: {}
}

export type AssessmentGetPayload<S extends boolean | null | undefined | AssessmentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AssessmentPayload, S>

export type AssessmentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AssessmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AssessmentCountAggregateInputType | true
  }

export interface AssessmentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assessment'], meta: { name: 'Assessment' } }
  /**
   * Find zero or one Assessment that matches the filter.
   * @param {AssessmentFindUniqueArgs} args - Arguments to find a Assessment
   * @example
   * // Get one Assessment
   * const assessment = await prisma.assessment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AssessmentFindUniqueArgs>(args: Prisma.SelectSubset<T, AssessmentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Assessment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AssessmentFindUniqueOrThrowArgs} args - Arguments to find a Assessment
   * @example
   * // Get one Assessment
   * const assessment = await prisma.assessment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AssessmentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Assessment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssessmentFindFirstArgs} args - Arguments to find a Assessment
   * @example
   * // Get one Assessment
   * const assessment = await prisma.assessment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AssessmentFindFirstArgs>(args?: Prisma.SelectSubset<T, AssessmentFindFirstArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Assessment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssessmentFindFirstOrThrowArgs} args - Arguments to find a Assessment
   * @example
   * // Get one Assessment
   * const assessment = await prisma.assessment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AssessmentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Assessments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Assessments
   * const assessments = await prisma.assessment.findMany()
   * 
   * // Get first 10 Assessments
   * const assessments = await prisma.assessment.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const assessmentWithIdOnly = await prisma.assessment.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AssessmentFindManyArgs>(args?: Prisma.SelectSubset<T, AssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Assessment.
   * @param {AssessmentCreateArgs} args - Arguments to create a Assessment.
   * @example
   * // Create one Assessment
   * const Assessment = await prisma.assessment.create({
   *   data: {
   *     // ... data to create a Assessment
   *   }
   * })
   * 
   */
  create<T extends AssessmentCreateArgs>(args: Prisma.SelectSubset<T, AssessmentCreateArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Assessments.
   * @param {AssessmentCreateManyArgs} args - Arguments to create many Assessments.
   * @example
   * // Create many Assessments
   * const assessment = await prisma.assessment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AssessmentCreateManyArgs>(args?: Prisma.SelectSubset<T, AssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Assessments and returns the data saved in the database.
   * @param {AssessmentCreateManyAndReturnArgs} args - Arguments to create many Assessments.
   * @example
   * // Create many Assessments
   * const assessment = await prisma.assessment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Assessments and only return the `id`
   * const assessmentWithIdOnly = await prisma.assessment.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AssessmentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Assessment.
   * @param {AssessmentDeleteArgs} args - Arguments to delete one Assessment.
   * @example
   * // Delete one Assessment
   * const Assessment = await prisma.assessment.delete({
   *   where: {
   *     // ... filter to delete one Assessment
   *   }
   * })
   * 
   */
  delete<T extends AssessmentDeleteArgs>(args: Prisma.SelectSubset<T, AssessmentDeleteArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Assessment.
   * @param {AssessmentUpdateArgs} args - Arguments to update one Assessment.
   * @example
   * // Update one Assessment
   * const assessment = await prisma.assessment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AssessmentUpdateArgs>(args: Prisma.SelectSubset<T, AssessmentUpdateArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Assessments.
   * @param {AssessmentDeleteManyArgs} args - Arguments to filter Assessments to delete.
   * @example
   * // Delete a few Assessments
   * const { count } = await prisma.assessment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AssessmentDeleteManyArgs>(args?: Prisma.SelectSubset<T, AssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Assessments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssessmentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Assessments
   * const assessment = await prisma.assessment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AssessmentUpdateManyArgs>(args: Prisma.SelectSubset<T, AssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Assessments and returns the data updated in the database.
   * @param {AssessmentUpdateManyAndReturnArgs} args - Arguments to update many Assessments.
   * @example
   * // Update many Assessments
   * const assessment = await prisma.assessment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Assessments and only return the `id`
   * const assessmentWithIdOnly = await prisma.assessment.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AssessmentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AssessmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Assessment.
   * @param {AssessmentUpsertArgs} args - Arguments to update or create a Assessment.
   * @example
   * // Update or create a Assessment
   * const assessment = await prisma.assessment.upsert({
   *   create: {
   *     // ... data to create a Assessment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Assessment we want to update
   *   }
   * })
   */
  upsert<T extends AssessmentUpsertArgs>(args: Prisma.SelectSubset<T, AssessmentUpsertArgs<ExtArgs>>): Prisma.Prisma__AssessmentClient<runtime.Types.Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Assessments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssessmentCountArgs} args - Arguments to filter Assessments to count.
   * @example
   * // Count the number of Assessments
   * const count = await prisma.assessment.count({
   *   where: {
   *     // ... the filter for the Assessments we want to count
   *   }
   * })
  **/
  count<T extends AssessmentCountArgs>(
    args?: Prisma.Subset<T, AssessmentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AssessmentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Assessment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AssessmentAggregateArgs>(args: Prisma.Subset<T, AssessmentAggregateArgs>): Prisma.PrismaPromise<GetAssessmentAggregateType<T>>

  /**
   * Group by Assessment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AssessmentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AssessmentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AssessmentGroupByArgs['orderBy'] }
      : { orderBy?: AssessmentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Assessment model
 */
readonly fields: AssessmentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Assessment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AssessmentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Assessment model
 */
export interface AssessmentFieldRefs {
  readonly id: Prisma.FieldRef<"Assessment", 'String'>
  readonly userId: Prisma.FieldRef<"Assessment", 'String'>
  readonly quizScore: Prisma.FieldRef<"Assessment", 'Float'>
  readonly questions: Prisma.FieldRef<"Assessment", 'Json[]'>
  readonly category: Prisma.FieldRef<"Assessment", 'String'>
  readonly improvementTip: Prisma.FieldRef<"Assessment", 'String'>
  readonly createdAt: Prisma.FieldRef<"Assessment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Assessment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Assessment findUnique
 */
export type AssessmentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * Filter, which Assessment to fetch.
   */
  where: Prisma.AssessmentWhereUniqueInput
}

/**
 * Assessment findUniqueOrThrow
 */
export type AssessmentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * Filter, which Assessment to fetch.
   */
  where: Prisma.AssessmentWhereUniqueInput
}

/**
 * Assessment findFirst
 */
export type AssessmentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * Filter, which Assessment to fetch.
   */
  where?: Prisma.AssessmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assessments to fetch.
   */
  orderBy?: Prisma.AssessmentOrderByWithRelationInput | Prisma.AssessmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Assessments.
   */
  cursor?: Prisma.AssessmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assessments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assessments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Assessments.
   */
  distinct?: Prisma.AssessmentScalarFieldEnum | Prisma.AssessmentScalarFieldEnum[]
}

/**
 * Assessment findFirstOrThrow
 */
export type AssessmentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * Filter, which Assessment to fetch.
   */
  where?: Prisma.AssessmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assessments to fetch.
   */
  orderBy?: Prisma.AssessmentOrderByWithRelationInput | Prisma.AssessmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Assessments.
   */
  cursor?: Prisma.AssessmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assessments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assessments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Assessments.
   */
  distinct?: Prisma.AssessmentScalarFieldEnum | Prisma.AssessmentScalarFieldEnum[]
}

/**
 * Assessment findMany
 */
export type AssessmentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * Filter, which Assessments to fetch.
   */
  where?: Prisma.AssessmentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Assessments to fetch.
   */
  orderBy?: Prisma.AssessmentOrderByWithRelationInput | Prisma.AssessmentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Assessments.
   */
  cursor?: Prisma.AssessmentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Assessments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Assessments.
   */
  skip?: number
  distinct?: Prisma.AssessmentScalarFieldEnum | Prisma.AssessmentScalarFieldEnum[]
}

/**
 * Assessment create
 */
export type AssessmentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * The data needed to create a Assessment.
   */
  data: Prisma.XOR<Prisma.AssessmentCreateInput, Prisma.AssessmentUncheckedCreateInput>
}

/**
 * Assessment createMany
 */
export type AssessmentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Assessments.
   */
  data: Prisma.AssessmentCreateManyInput | Prisma.AssessmentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Assessment createManyAndReturn
 */
export type AssessmentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * The data used to create many Assessments.
   */
  data: Prisma.AssessmentCreateManyInput | Prisma.AssessmentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Assessment update
 */
export type AssessmentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * The data needed to update a Assessment.
   */
  data: Prisma.XOR<Prisma.AssessmentUpdateInput, Prisma.AssessmentUncheckedUpdateInput>
  /**
   * Choose, which Assessment to update.
   */
  where: Prisma.AssessmentWhereUniqueInput
}

/**
 * Assessment updateMany
 */
export type AssessmentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Assessments.
   */
  data: Prisma.XOR<Prisma.AssessmentUpdateManyMutationInput, Prisma.AssessmentUncheckedUpdateManyInput>
  /**
   * Filter which Assessments to update
   */
  where?: Prisma.AssessmentWhereInput
  /**
   * Limit how many Assessments to update.
   */
  limit?: number
}

/**
 * Assessment updateManyAndReturn
 */
export type AssessmentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * The data used to update Assessments.
   */
  data: Prisma.XOR<Prisma.AssessmentUpdateManyMutationInput, Prisma.AssessmentUncheckedUpdateManyInput>
  /**
   * Filter which Assessments to update
   */
  where?: Prisma.AssessmentWhereInput
  /**
   * Limit how many Assessments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Assessment upsert
 */
export type AssessmentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * The filter to search for the Assessment to update in case it exists.
   */
  where: Prisma.AssessmentWhereUniqueInput
  /**
   * In case the Assessment found by the `where` argument doesn't exist, create a new Assessment with this data.
   */
  create: Prisma.XOR<Prisma.AssessmentCreateInput, Prisma.AssessmentUncheckedCreateInput>
  /**
   * In case the Assessment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AssessmentUpdateInput, Prisma.AssessmentUncheckedUpdateInput>
}

/**
 * Assessment delete
 */
export type AssessmentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
  /**
   * Filter which Assessment to delete.
   */
  where: Prisma.AssessmentWhereUniqueInput
}

/**
 * Assessment deleteMany
 */
export type AssessmentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Assessments to delete
   */
  where?: Prisma.AssessmentWhereInput
  /**
   * Limit how many Assessments to delete.
   */
  limit?: number
}

/**
 * Assessment without action
 */
export type AssessmentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Assessment
   */
  select?: Prisma.AssessmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Assessment
   */
  omit?: Prisma.AssessmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AssessmentInclude<ExtArgs> | null
}
