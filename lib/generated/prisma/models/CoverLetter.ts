
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `CoverLetter` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CoverLetter
 * 
 */
export type CoverLetterModel = runtime.Types.Result.DefaultSelection<Prisma.$CoverLetterPayload>

export type AggregateCoverLetter = {
  _count: CoverLetterCountAggregateOutputType | null
  _min: CoverLetterMinAggregateOutputType | null
  _max: CoverLetterMaxAggregateOutputType | null
}

export type CoverLetterMinAggregateOutputType = {
  id: string | null
  userId: string | null
  content: string | null
  jobDescription: string | null
  companyName: string | null
  jobTitle: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CoverLetterMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  content: string | null
  jobDescription: string | null
  companyName: string | null
  jobTitle: string | null
  status: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CoverLetterCountAggregateOutputType = {
  id: number
  userId: number
  content: number
  jobDescription: number
  companyName: number
  jobTitle: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CoverLetterMinAggregateInputType = {
  id?: true
  userId?: true
  content?: true
  jobDescription?: true
  companyName?: true
  jobTitle?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type CoverLetterMaxAggregateInputType = {
  id?: true
  userId?: true
  content?: true
  jobDescription?: true
  companyName?: true
  jobTitle?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type CoverLetterCountAggregateInputType = {
  id?: true
  userId?: true
  content?: true
  jobDescription?: true
  companyName?: true
  jobTitle?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CoverLetterAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CoverLetter to aggregate.
   */
  where?: Prisma.CoverLetterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoverLetters to fetch.
   */
  orderBy?: Prisma.CoverLetterOrderByWithRelationInput | Prisma.CoverLetterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CoverLetterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoverLetters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoverLetters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CoverLetters
  **/
  _count?: true | CoverLetterCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CoverLetterMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CoverLetterMaxAggregateInputType
}

export type GetCoverLetterAggregateType<T extends CoverLetterAggregateArgs> = {
      [P in keyof T & keyof AggregateCoverLetter]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCoverLetter[P]>
    : Prisma.GetScalarType<T[P], AggregateCoverLetter[P]>
}




export type CoverLetterGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CoverLetterWhereInput
  orderBy?: Prisma.CoverLetterOrderByWithAggregationInput | Prisma.CoverLetterOrderByWithAggregationInput[]
  by: Prisma.CoverLetterScalarFieldEnum[] | Prisma.CoverLetterScalarFieldEnum
  having?: Prisma.CoverLetterScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CoverLetterCountAggregateInputType | true
  _min?: CoverLetterMinAggregateInputType
  _max?: CoverLetterMaxAggregateInputType
}

export type CoverLetterGroupByOutputType = {
  id: string
  userId: string
  content: string
  jobDescription: string | null
  companyName: string
  jobTitle: string
  status: string
  createdAt: Date
  updatedAt: Date
  _count: CoverLetterCountAggregateOutputType | null
  _min: CoverLetterMinAggregateOutputType | null
  _max: CoverLetterMaxAggregateOutputType | null
}

type GetCoverLetterGroupByPayload<T extends CoverLetterGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CoverLetterGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CoverLetterGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CoverLetterGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CoverLetterGroupByOutputType[P]>
      }
    >
  > 



export type CoverLetterWhereInput = {
  AND?: Prisma.CoverLetterWhereInput | Prisma.CoverLetterWhereInput[]
  OR?: Prisma.CoverLetterWhereInput[]
  NOT?: Prisma.CoverLetterWhereInput | Prisma.CoverLetterWhereInput[]
  id?: Prisma.StringFilter<"CoverLetter"> | string
  userId?: Prisma.StringFilter<"CoverLetter"> | string
  content?: Prisma.StringFilter<"CoverLetter"> | string
  jobDescription?: Prisma.StringNullableFilter<"CoverLetter"> | string | null
  companyName?: Prisma.StringFilter<"CoverLetter"> | string
  jobTitle?: Prisma.StringFilter<"CoverLetter"> | string
  status?: Prisma.StringFilter<"CoverLetter"> | string
  createdAt?: Prisma.DateTimeFilter<"CoverLetter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CoverLetter"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type CoverLetterOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  jobDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  companyName?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type CoverLetterWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.CoverLetterWhereInput | Prisma.CoverLetterWhereInput[]
  OR?: Prisma.CoverLetterWhereInput[]
  NOT?: Prisma.CoverLetterWhereInput | Prisma.CoverLetterWhereInput[]
  userId?: Prisma.StringFilter<"CoverLetter"> | string
  content?: Prisma.StringFilter<"CoverLetter"> | string
  jobDescription?: Prisma.StringNullableFilter<"CoverLetter"> | string | null
  companyName?: Prisma.StringFilter<"CoverLetter"> | string
  jobTitle?: Prisma.StringFilter<"CoverLetter"> | string
  status?: Prisma.StringFilter<"CoverLetter"> | string
  createdAt?: Prisma.DateTimeFilter<"CoverLetter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CoverLetter"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type CoverLetterOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  jobDescription?: Prisma.SortOrderInput | Prisma.SortOrder
  companyName?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CoverLetterCountOrderByAggregateInput
  _max?: Prisma.CoverLetterMaxOrderByAggregateInput
  _min?: Prisma.CoverLetterMinOrderByAggregateInput
}

export type CoverLetterScalarWhereWithAggregatesInput = {
  AND?: Prisma.CoverLetterScalarWhereWithAggregatesInput | Prisma.CoverLetterScalarWhereWithAggregatesInput[]
  OR?: Prisma.CoverLetterScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CoverLetterScalarWhereWithAggregatesInput | Prisma.CoverLetterScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"CoverLetter"> | string
  userId?: Prisma.StringWithAggregatesFilter<"CoverLetter"> | string
  content?: Prisma.StringWithAggregatesFilter<"CoverLetter"> | string
  jobDescription?: Prisma.StringNullableWithAggregatesFilter<"CoverLetter"> | string | null
  companyName?: Prisma.StringWithAggregatesFilter<"CoverLetter"> | string
  jobTitle?: Prisma.StringWithAggregatesFilter<"CoverLetter"> | string
  status?: Prisma.StringWithAggregatesFilter<"CoverLetter"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"CoverLetter"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"CoverLetter"> | Date | string
}

export type CoverLetterCreateInput = {
  id?: string
  content: string
  jobDescription?: string | null
  companyName: string
  jobTitle: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCoverLetterInput
}

export type CoverLetterUncheckedCreateInput = {
  id?: string
  userId: string
  content: string
  jobDescription?: string | null
  companyName: string
  jobTitle: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CoverLetterUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  jobDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCoverLetterNestedInput
}

export type CoverLetterUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  jobDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoverLetterCreateManyInput = {
  id?: string
  userId: string
  content: string
  jobDescription?: string | null
  companyName: string
  jobTitle: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CoverLetterUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  jobDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoverLetterUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  jobDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoverLetterListRelationFilter = {
  every?: Prisma.CoverLetterWhereInput
  some?: Prisma.CoverLetterWhereInput
  none?: Prisma.CoverLetterWhereInput
}

export type CoverLetterOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CoverLetterCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  jobDescription?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CoverLetterMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  jobDescription?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CoverLetterMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  jobDescription?: Prisma.SortOrder
  companyName?: Prisma.SortOrder
  jobTitle?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CoverLetterCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CoverLetterCreateWithoutUserInput, Prisma.CoverLetterUncheckedCreateWithoutUserInput> | Prisma.CoverLetterCreateWithoutUserInput[] | Prisma.CoverLetterUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoverLetterCreateOrConnectWithoutUserInput | Prisma.CoverLetterCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CoverLetterCreateManyUserInputEnvelope
  connect?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
}

export type CoverLetterUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CoverLetterCreateWithoutUserInput, Prisma.CoverLetterUncheckedCreateWithoutUserInput> | Prisma.CoverLetterCreateWithoutUserInput[] | Prisma.CoverLetterUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoverLetterCreateOrConnectWithoutUserInput | Prisma.CoverLetterCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CoverLetterCreateManyUserInputEnvelope
  connect?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
}

export type CoverLetterUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CoverLetterCreateWithoutUserInput, Prisma.CoverLetterUncheckedCreateWithoutUserInput> | Prisma.CoverLetterCreateWithoutUserInput[] | Prisma.CoverLetterUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoverLetterCreateOrConnectWithoutUserInput | Prisma.CoverLetterCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CoverLetterUpsertWithWhereUniqueWithoutUserInput | Prisma.CoverLetterUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CoverLetterCreateManyUserInputEnvelope
  set?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  disconnect?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  delete?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  connect?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  update?: Prisma.CoverLetterUpdateWithWhereUniqueWithoutUserInput | Prisma.CoverLetterUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CoverLetterUpdateManyWithWhereWithoutUserInput | Prisma.CoverLetterUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CoverLetterScalarWhereInput | Prisma.CoverLetterScalarWhereInput[]
}

export type CoverLetterUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CoverLetterCreateWithoutUserInput, Prisma.CoverLetterUncheckedCreateWithoutUserInput> | Prisma.CoverLetterCreateWithoutUserInput[] | Prisma.CoverLetterUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CoverLetterCreateOrConnectWithoutUserInput | Prisma.CoverLetterCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CoverLetterUpsertWithWhereUniqueWithoutUserInput | Prisma.CoverLetterUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CoverLetterCreateManyUserInputEnvelope
  set?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  disconnect?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  delete?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  connect?: Prisma.CoverLetterWhereUniqueInput | Prisma.CoverLetterWhereUniqueInput[]
  update?: Prisma.CoverLetterUpdateWithWhereUniqueWithoutUserInput | Prisma.CoverLetterUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CoverLetterUpdateManyWithWhereWithoutUserInput | Prisma.CoverLetterUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CoverLetterScalarWhereInput | Prisma.CoverLetterScalarWhereInput[]
}

export type CoverLetterCreateWithoutUserInput = {
  id?: string
  content: string
  jobDescription?: string | null
  companyName: string
  jobTitle: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CoverLetterUncheckedCreateWithoutUserInput = {
  id?: string
  content: string
  jobDescription?: string | null
  companyName: string
  jobTitle: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CoverLetterCreateOrConnectWithoutUserInput = {
  where: Prisma.CoverLetterWhereUniqueInput
  create: Prisma.XOR<Prisma.CoverLetterCreateWithoutUserInput, Prisma.CoverLetterUncheckedCreateWithoutUserInput>
}

export type CoverLetterCreateManyUserInputEnvelope = {
  data: Prisma.CoverLetterCreateManyUserInput | Prisma.CoverLetterCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type CoverLetterUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CoverLetterWhereUniqueInput
  update: Prisma.XOR<Prisma.CoverLetterUpdateWithoutUserInput, Prisma.CoverLetterUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CoverLetterCreateWithoutUserInput, Prisma.CoverLetterUncheckedCreateWithoutUserInput>
}

export type CoverLetterUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CoverLetterWhereUniqueInput
  data: Prisma.XOR<Prisma.CoverLetterUpdateWithoutUserInput, Prisma.CoverLetterUncheckedUpdateWithoutUserInput>
}

export type CoverLetterUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CoverLetterScalarWhereInput
  data: Prisma.XOR<Prisma.CoverLetterUpdateManyMutationInput, Prisma.CoverLetterUncheckedUpdateManyWithoutUserInput>
}

export type CoverLetterScalarWhereInput = {
  AND?: Prisma.CoverLetterScalarWhereInput | Prisma.CoverLetterScalarWhereInput[]
  OR?: Prisma.CoverLetterScalarWhereInput[]
  NOT?: Prisma.CoverLetterScalarWhereInput | Prisma.CoverLetterScalarWhereInput[]
  id?: Prisma.StringFilter<"CoverLetter"> | string
  userId?: Prisma.StringFilter<"CoverLetter"> | string
  content?: Prisma.StringFilter<"CoverLetter"> | string
  jobDescription?: Prisma.StringNullableFilter<"CoverLetter"> | string | null
  companyName?: Prisma.StringFilter<"CoverLetter"> | string
  jobTitle?: Prisma.StringFilter<"CoverLetter"> | string
  status?: Prisma.StringFilter<"CoverLetter"> | string
  createdAt?: Prisma.DateTimeFilter<"CoverLetter"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"CoverLetter"> | Date | string
}

export type CoverLetterCreateManyUserInput = {
  id?: string
  content: string
  jobDescription?: string | null
  companyName: string
  jobTitle: string
  status?: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CoverLetterUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  jobDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoverLetterUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  jobDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CoverLetterUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  jobDescription?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyName?: Prisma.StringFieldUpdateOperationsInput | string
  jobTitle?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type CoverLetterSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  content?: boolean
  jobDescription?: boolean
  companyName?: boolean
  jobTitle?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["coverLetter"]>

export type CoverLetterSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  content?: boolean
  jobDescription?: boolean
  companyName?: boolean
  jobTitle?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["coverLetter"]>

export type CoverLetterSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  content?: boolean
  jobDescription?: boolean
  companyName?: boolean
  jobTitle?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["coverLetter"]>

export type CoverLetterSelectScalar = {
  id?: boolean
  userId?: boolean
  content?: boolean
  jobDescription?: boolean
  companyName?: boolean
  jobTitle?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CoverLetterOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "content" | "jobDescription" | "companyName" | "jobTitle" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["coverLetter"]>
export type CoverLetterInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CoverLetterIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CoverLetterIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CoverLetterPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CoverLetter"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    content: string
    jobDescription: string | null
    companyName: string
    jobTitle: string
    status: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["coverLetter"]>
  composites: {}
}

export type CoverLetterGetPayload<S extends boolean | null | undefined | CoverLetterDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload, S>

export type CoverLetterCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CoverLetterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CoverLetterCountAggregateInputType | true
  }

export interface CoverLetterDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoverLetter'], meta: { name: 'CoverLetter' } }
  /**
   * Find zero or one CoverLetter that matches the filter.
   * @param {CoverLetterFindUniqueArgs} args - Arguments to find a CoverLetter
   * @example
   * // Get one CoverLetter
   * const coverLetter = await prisma.coverLetter.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CoverLetterFindUniqueArgs>(args: Prisma.SelectSubset<T, CoverLetterFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CoverLetter that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CoverLetterFindUniqueOrThrowArgs} args - Arguments to find a CoverLetter
   * @example
   * // Get one CoverLetter
   * const coverLetter = await prisma.coverLetter.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CoverLetterFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CoverLetterFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CoverLetter that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoverLetterFindFirstArgs} args - Arguments to find a CoverLetter
   * @example
   * // Get one CoverLetter
   * const coverLetter = await prisma.coverLetter.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CoverLetterFindFirstArgs>(args?: Prisma.SelectSubset<T, CoverLetterFindFirstArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CoverLetter that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoverLetterFindFirstOrThrowArgs} args - Arguments to find a CoverLetter
   * @example
   * // Get one CoverLetter
   * const coverLetter = await prisma.coverLetter.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CoverLetterFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CoverLetterFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CoverLetters that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoverLetterFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CoverLetters
   * const coverLetters = await prisma.coverLetter.findMany()
   * 
   * // Get first 10 CoverLetters
   * const coverLetters = await prisma.coverLetter.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const coverLetterWithIdOnly = await prisma.coverLetter.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CoverLetterFindManyArgs>(args?: Prisma.SelectSubset<T, CoverLetterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CoverLetter.
   * @param {CoverLetterCreateArgs} args - Arguments to create a CoverLetter.
   * @example
   * // Create one CoverLetter
   * const CoverLetter = await prisma.coverLetter.create({
   *   data: {
   *     // ... data to create a CoverLetter
   *   }
   * })
   * 
   */
  create<T extends CoverLetterCreateArgs>(args: Prisma.SelectSubset<T, CoverLetterCreateArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CoverLetters.
   * @param {CoverLetterCreateManyArgs} args - Arguments to create many CoverLetters.
   * @example
   * // Create many CoverLetters
   * const coverLetter = await prisma.coverLetter.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CoverLetterCreateManyArgs>(args?: Prisma.SelectSubset<T, CoverLetterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CoverLetters and returns the data saved in the database.
   * @param {CoverLetterCreateManyAndReturnArgs} args - Arguments to create many CoverLetters.
   * @example
   * // Create many CoverLetters
   * const coverLetter = await prisma.coverLetter.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CoverLetters and only return the `id`
   * const coverLetterWithIdOnly = await prisma.coverLetter.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CoverLetterCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CoverLetterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CoverLetter.
   * @param {CoverLetterDeleteArgs} args - Arguments to delete one CoverLetter.
   * @example
   * // Delete one CoverLetter
   * const CoverLetter = await prisma.coverLetter.delete({
   *   where: {
   *     // ... filter to delete one CoverLetter
   *   }
   * })
   * 
   */
  delete<T extends CoverLetterDeleteArgs>(args: Prisma.SelectSubset<T, CoverLetterDeleteArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CoverLetter.
   * @param {CoverLetterUpdateArgs} args - Arguments to update one CoverLetter.
   * @example
   * // Update one CoverLetter
   * const coverLetter = await prisma.coverLetter.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CoverLetterUpdateArgs>(args: Prisma.SelectSubset<T, CoverLetterUpdateArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CoverLetters.
   * @param {CoverLetterDeleteManyArgs} args - Arguments to filter CoverLetters to delete.
   * @example
   * // Delete a few CoverLetters
   * const { count } = await prisma.coverLetter.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CoverLetterDeleteManyArgs>(args?: Prisma.SelectSubset<T, CoverLetterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CoverLetters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoverLetterUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CoverLetters
   * const coverLetter = await prisma.coverLetter.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CoverLetterUpdateManyArgs>(args: Prisma.SelectSubset<T, CoverLetterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CoverLetters and returns the data updated in the database.
   * @param {CoverLetterUpdateManyAndReturnArgs} args - Arguments to update many CoverLetters.
   * @example
   * // Update many CoverLetters
   * const coverLetter = await prisma.coverLetter.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CoverLetters and only return the `id`
   * const coverLetterWithIdOnly = await prisma.coverLetter.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CoverLetterUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CoverLetterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CoverLetter.
   * @param {CoverLetterUpsertArgs} args - Arguments to update or create a CoverLetter.
   * @example
   * // Update or create a CoverLetter
   * const coverLetter = await prisma.coverLetter.upsert({
   *   create: {
   *     // ... data to create a CoverLetter
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CoverLetter we want to update
   *   }
   * })
   */
  upsert<T extends CoverLetterUpsertArgs>(args: Prisma.SelectSubset<T, CoverLetterUpsertArgs<ExtArgs>>): Prisma.Prisma__CoverLetterClient<runtime.Types.Result.GetResult<Prisma.$CoverLetterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CoverLetters.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoverLetterCountArgs} args - Arguments to filter CoverLetters to count.
   * @example
   * // Count the number of CoverLetters
   * const count = await prisma.coverLetter.count({
   *   where: {
   *     // ... the filter for the CoverLetters we want to count
   *   }
   * })
  **/
  count<T extends CoverLetterCountArgs>(
    args?: Prisma.Subset<T, CoverLetterCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CoverLetterCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CoverLetter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoverLetterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CoverLetterAggregateArgs>(args: Prisma.Subset<T, CoverLetterAggregateArgs>): Prisma.PrismaPromise<GetCoverLetterAggregateType<T>>

  /**
   * Group by CoverLetter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CoverLetterGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CoverLetterGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CoverLetterGroupByArgs['orderBy'] }
      : { orderBy?: CoverLetterGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CoverLetterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoverLetterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CoverLetter model
 */
readonly fields: CoverLetterFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CoverLetter.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CoverLetterClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CoverLetter model
 */
export interface CoverLetterFieldRefs {
  readonly id: Prisma.FieldRef<"CoverLetter", 'String'>
  readonly userId: Prisma.FieldRef<"CoverLetter", 'String'>
  readonly content: Prisma.FieldRef<"CoverLetter", 'String'>
  readonly jobDescription: Prisma.FieldRef<"CoverLetter", 'String'>
  readonly companyName: Prisma.FieldRef<"CoverLetter", 'String'>
  readonly jobTitle: Prisma.FieldRef<"CoverLetter", 'String'>
  readonly status: Prisma.FieldRef<"CoverLetter", 'String'>
  readonly createdAt: Prisma.FieldRef<"CoverLetter", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"CoverLetter", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CoverLetter findUnique
 */
export type CoverLetterFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * Filter, which CoverLetter to fetch.
   */
  where: Prisma.CoverLetterWhereUniqueInput
}

/**
 * CoverLetter findUniqueOrThrow
 */
export type CoverLetterFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * Filter, which CoverLetter to fetch.
   */
  where: Prisma.CoverLetterWhereUniqueInput
}

/**
 * CoverLetter findFirst
 */
export type CoverLetterFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * Filter, which CoverLetter to fetch.
   */
  where?: Prisma.CoverLetterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoverLetters to fetch.
   */
  orderBy?: Prisma.CoverLetterOrderByWithRelationInput | Prisma.CoverLetterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CoverLetters.
   */
  cursor?: Prisma.CoverLetterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoverLetters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoverLetters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CoverLetters.
   */
  distinct?: Prisma.CoverLetterScalarFieldEnum | Prisma.CoverLetterScalarFieldEnum[]
}

/**
 * CoverLetter findFirstOrThrow
 */
export type CoverLetterFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * Filter, which CoverLetter to fetch.
   */
  where?: Prisma.CoverLetterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoverLetters to fetch.
   */
  orderBy?: Prisma.CoverLetterOrderByWithRelationInput | Prisma.CoverLetterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CoverLetters.
   */
  cursor?: Prisma.CoverLetterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoverLetters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoverLetters.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CoverLetters.
   */
  distinct?: Prisma.CoverLetterScalarFieldEnum | Prisma.CoverLetterScalarFieldEnum[]
}

/**
 * CoverLetter findMany
 */
export type CoverLetterFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * Filter, which CoverLetters to fetch.
   */
  where?: Prisma.CoverLetterWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CoverLetters to fetch.
   */
  orderBy?: Prisma.CoverLetterOrderByWithRelationInput | Prisma.CoverLetterOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CoverLetters.
   */
  cursor?: Prisma.CoverLetterWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CoverLetters from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CoverLetters.
   */
  skip?: number
  distinct?: Prisma.CoverLetterScalarFieldEnum | Prisma.CoverLetterScalarFieldEnum[]
}

/**
 * CoverLetter create
 */
export type CoverLetterCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * The data needed to create a CoverLetter.
   */
  data: Prisma.XOR<Prisma.CoverLetterCreateInput, Prisma.CoverLetterUncheckedCreateInput>
}

/**
 * CoverLetter createMany
 */
export type CoverLetterCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CoverLetters.
   */
  data: Prisma.CoverLetterCreateManyInput | Prisma.CoverLetterCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CoverLetter createManyAndReturn
 */
export type CoverLetterCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * The data used to create many CoverLetters.
   */
  data: Prisma.CoverLetterCreateManyInput | Prisma.CoverLetterCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * CoverLetter update
 */
export type CoverLetterUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * The data needed to update a CoverLetter.
   */
  data: Prisma.XOR<Prisma.CoverLetterUpdateInput, Prisma.CoverLetterUncheckedUpdateInput>
  /**
   * Choose, which CoverLetter to update.
   */
  where: Prisma.CoverLetterWhereUniqueInput
}

/**
 * CoverLetter updateMany
 */
export type CoverLetterUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CoverLetters.
   */
  data: Prisma.XOR<Prisma.CoverLetterUpdateManyMutationInput, Prisma.CoverLetterUncheckedUpdateManyInput>
  /**
   * Filter which CoverLetters to update
   */
  where?: Prisma.CoverLetterWhereInput
  /**
   * Limit how many CoverLetters to update.
   */
  limit?: number
}

/**
 * CoverLetter updateManyAndReturn
 */
export type CoverLetterUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * The data used to update CoverLetters.
   */
  data: Prisma.XOR<Prisma.CoverLetterUpdateManyMutationInput, Prisma.CoverLetterUncheckedUpdateManyInput>
  /**
   * Filter which CoverLetters to update
   */
  where?: Prisma.CoverLetterWhereInput
  /**
   * Limit how many CoverLetters to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * CoverLetter upsert
 */
export type CoverLetterUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * The filter to search for the CoverLetter to update in case it exists.
   */
  where: Prisma.CoverLetterWhereUniqueInput
  /**
   * In case the CoverLetter found by the `where` argument doesn't exist, create a new CoverLetter with this data.
   */
  create: Prisma.XOR<Prisma.CoverLetterCreateInput, Prisma.CoverLetterUncheckedCreateInput>
  /**
   * In case the CoverLetter was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CoverLetterUpdateInput, Prisma.CoverLetterUncheckedUpdateInput>
}

/**
 * CoverLetter delete
 */
export type CoverLetterDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
  /**
   * Filter which CoverLetter to delete.
   */
  where: Prisma.CoverLetterWhereUniqueInput
}

/**
 * CoverLetter deleteMany
 */
export type CoverLetterDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CoverLetters to delete
   */
  where?: Prisma.CoverLetterWhereInput
  /**
   * Limit how many CoverLetters to delete.
   */
  limit?: number
}

/**
 * CoverLetter without action
 */
export type CoverLetterDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CoverLetter
   */
  select?: Prisma.CoverLetterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CoverLetter
   */
  omit?: Prisma.CoverLetterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CoverLetterInclude<ExtArgs> | null
}
